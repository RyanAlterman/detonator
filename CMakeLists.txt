cmake_minimum_required(VERSION 3.0)

project(PinyinInvaders)

message(STATUS "
          ~~ PinyinInvaders ~~

    \\\\o Brought to you by Ensisoft o//
        http://www.ensisoft.com
    Copyright (c) 2019 Sami Väisänen
                Ensisoft

https://github.com/ensisoft/pinyin-invaders

")

# begin with the turds in 3rd party libs

# Freetype2
option(WITH_ZLIB "Freetype: Enable zlib " OFF)
option(WITH_BZip2 "Freetype: Enable bzip2 " OFF)
option(WITH_HarfBuzz "Freetype: Enable harfbuzz" OFF)
option(WITH_PNG "Freetype: Build with PNG" OFF)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/freetype)

# harfbuzz (depends on freetype2)
set(HARFBUZZ_FREETYPE_INCLUDE "${CMAKE_CURRENT_SOURCE_DIR}/third_party/freetype/include" CACHE STRING "Freetype2 include folder")
set(HARFBUZZ_FREETYPE_LIBRARY "freetype_custom_build" CACHE STRING "Name of the Freetype2 library build.")
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/harfbuzz)


# Unfortunately we need boost...
set(Boost_USE_STATIC_LIBS ON)
if(WIN32)
    set(BOOST_ROOT $ENV{BOOST_ROOT})
    if (NOT BOOST_ROOT)
        set(BOOST_ROOT "c:/local/boost_1_61_0")
        message("
Bollocks. BOOST_ROOT was not set. Defaulting to ${BOOST_ROOT}
TL;DR BOOST_ROOT is a variable that points to your Boost installation
root. So for example if your Boost is installed in C:/boost_1_55_0
your BOOST_ROOT should be c:/boost_1_55_0.
You can set the variable in M$ command prompt with

        $ set BOOST_ROOT=c:/boost_1_55_0

and in Linux in your terminal (in bash)

        $ export BOOST_ROOT=/usr/local/boost_1_55_0

")
    endif()
endif()

# for some reason the find_package fails on windows when we say which
# libs we'd like to use. Anyway the linking is automatic so we'll just
# add the libs manually to linking options for Linux.
#find_package(Boost REQUIRED COMPONENTS system filesystem)
find_package(Boost REQUIRED COMPONENTS)
if(NOT Boost_FOUND)
    if (UNIX)
        message(FATAL_ERROR "
Boost (http://www.boost.org) development libraries were not found.
You should be able to use the boost dev packages available in your distro's repos.
On Ubuntu you might want to try 'sudo apt-get install libboost-all-dev'
On other distros please consult your distro's docs on how to install Boost.
I'm going to crap out now. >.<
")
    elseif(WIN32)
        message(FATAL_ERROR "
Boost (http://www.boost.org) development libraries were not found.
You can download a prebuilt binary package from http://www.boost.org.
Or if you're using Visual Studio 2015 you can follow this direct link:
https://sourceforge.net/projects/boost/files/boost-binaries/1.61.0/boost_1_61_0-msvc-14.0-64.exe/download
If you have boost but not in a default location or another version of boost
you can try to specify BOOST_ROOT environment variable.
I'm going to crap out now. >.<
")
    endif()
endif()

# why is this not set!?
# should come from cmake through find_package(Boost, ...)
if(NOT Boost_LIBRARY_DIRS)
    message(WARNING "
Boost_LIBRARY_DIRS is not set.
I'm going to use a default for MSVS 14 2015 Win64.
If that doesn't match your build environment/compiler/arch you will need
to edit the line below this message manually.
Sorry about that :-(
")
    set(Boost_LIBRARY_DIRS "${BOOST_ROOT}/lib64-msvc-14.0")
endif()

message(STATUS "${Boost_INCLUDE_DIRS}")
message(STATUS "${Boost_LIBRARY_DIRS}")

include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/game")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party/freetype/include")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party/harfbuzz/src")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party/harfbuzz/src/generated")
include_directories(BEFORE "${Boost_INCLUDE_DIRS}")
link_directories("${Boost_LIBRARY_DIRS}")

# see this bug report about C++14 and Qt
# https://bugreports.qt.io/browse/QTBUG-53002
set(CMAKE_CXX_STANDARD 14)

# we also need Qt for the time being
if (WIN32)
    set(CMAKE_PREFIX_PATH "C:/Qt/Qt5.11.3/5.11.3/msvc2015_64")
endif()

find_package(Qt5Widgets)
find_package(Qt5OpenGL)
if (NOT Qt5Widgets_FOUND)
    message("
Qt5 was not found. I will not be able to build the game.
")
else()
    message(STATUS "Qt5 version: ${Qt5Widgets_VERSION}")
    message(STATUS "${Qt5Widgets_INCLUDE_DIRS}")
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
# this tells cmake to include our *current* directory which is our build directory
# in which the Qt tools (moc and uic) will spit out their generated files.
# so for example when you have "include ui_foobar.h" in your code the
# ui_foobar.h is generated by UIC and will be placed in the current dir.
set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_executable(invaders
    game/level.cpp
    game/gamewidget.cpp
    game/game.cpp
    game/main.cpp
    audio/pulseaudio.cpp
    audio/waveout.cpp
    audio/sample.cpp
    audio/player.cpp
    base/assert.cpp
    base/format.cpp
    base/logging.cpp
    graphics/opengl_es2_device.cpp
    graphics/painter.cpp
    graphics/text.cpp
    third_party/stb/stb_image.c
)
add_executable(audio_test
    audio/pulseaudio.cpp
    audio/waveout.cpp
    audio/sample.cpp
    audio/player.cpp
    audio/test/main.cpp
    base/assert.cpp
    base/format.cpp
    base/logging.cpp
)
target_link_libraries(audio_test Qt5::Widgets)
target_link_libraries(invaders Qt5::Widgets Qt5::OpenGL)
target_link_libraries(invaders freetype_custom_build)
target_link_libraries(invaders harfbuzz_custom_build)

if (WIN32)
  include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party/libsndfile")
  target_link_libraries(invaders "${CMAKE_CURRENT_LIST_DIR}/third_party/libsndfile/libsndfile-1.lib")
  target_link_libraries(audio_test "${CMAKE_CURRENT_LIST_DIR}/third_party/libsndfile/libsndfile-1.lib")
elseif (UNIX)
  target_link_libraries(invaders ncurses)
  target_link_libraries(invaders pulse)
  target_link_libraries(invaders sndfile)
  target_link_libraries(invaders pthread)

  target_link_libraries(audio_test ncurses)
  target_link_libraries(audio_test pulse)
  target_link_libraries(audio_test sndfile)
  target_link_libraries(audio_test pthread)
endif()

enable_testing()
add_executable(unit_test_bitmap graphics/unit_test/unit_test_bitmap.cpp base/assert.cpp)
add_executable(unit_test_image  graphics/unit_test/unit_test_image.cpp base/assert.cpp
    third_party/stb/stb_image.c)

install(TARGETS invaders DESTINATION "${CMAKE_CURRENT_LIST_DIR}/game/dist")
